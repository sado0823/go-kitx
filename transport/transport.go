package transport

import (
	"context"
	"net/url"

	_ "github.com/sado0823/go-kitx/pkg/encoding/form"
	_ "github.com/sado0823/go-kitx/pkg/encoding/json"
	_ "github.com/sado0823/go-kitx/pkg/encoding/proto"
	_ "github.com/sado0823/go-kitx/pkg/encoding/xml"
	_ "github.com/sado0823/go-kitx/pkg/encoding/yaml"
)

type (
	Server interface {
		Start(ctx context.Context) error
		Stop(ctx context.Context) error
	}

	Endpointer interface {
		Endpoint() (*url.URL, error)
	}

	Header interface {
		Get(key string) string
		Set(key, value string)
		Keys() []string
	}

	Transporter interface {
		// Kind http, grpc
		Kind() Kind
		// Endpoint return server or client endpoint
		// Server Transport: grpc://127.0.0.1:9000
		// Client Transport: discovery:///provider-demo
		Endpoint() string
		// Operation Service full method selector generated by protobuf
		// example: /helloworld.Greeter/SayHello
		Operation() string
		// RequestHeader return transport request header
		// http: http.Header
		// grpc: metadata.MD
		RequestHeader() Header
		// ReplyHeader return transport reply/response header
		// only valid for server transport
		// http: http.Header
		// grpc: metadata.MD
		ReplyHeader() Header
	}
)

type Kind string

func (k Kind) String() string {
	return string(k)
}

const (
	KindGRPC Kind = "grpc"
	KindHTTP Kind = "http"
)

type (
	serverTransportKey struct{}
	clientTransportKey struct{}
)

func NewServerContext(ctx context.Context, tr Transporter) context.Context {
	return context.WithValue(ctx, serverTransportKey{}, tr)
}

func FromServerContext(ctx context.Context) (tr Transporter, ok bool) {
	tr, ok = ctx.Value(serverTransportKey{}).(Transporter)
	return
}

func NewClientContext(ctx context.Context, tr Transporter) context.Context {
	return context.WithValue(ctx, clientTransportKey{}, tr)
}

func FromClientContext(ctx context.Context) (tr Transporter, ok bool) {
	tr, ok = ctx.Value(clientTransportKey{}).(Transporter)
	return
}
